// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: internal/api/proto/V1/binary_data/binary_data.proto

package binary_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BinaryDataService_SaveBinaryData_FullMethodName   = "/v1.binary_data.BinaryDataService/SaveBinaryData"
	BinaryDataService_GetBinaryData_FullMethodName    = "/v1.binary_data.BinaryDataService/GetBinaryData"
	BinaryDataService_EditBinaryData_FullMethodName   = "/v1.binary_data.BinaryDataService/EditBinaryData"
	BinaryDataService_DeleteBinaryData_FullMethodName = "/v1.binary_data.BinaryDataService/DeleteBinaryData"
)

// BinaryDataServiceClient is the client API for BinaryDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryDataServiceClient interface {
	SaveBinaryData(ctx context.Context, in *BinaryDataRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error)
	GetBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error)
	EditBinaryData(ctx context.Context, in *EditBinaryDataRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error)
	DeleteBinaryData(ctx context.Context, in *DeleteBinaryDataRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error)
}

type binaryDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryDataServiceClient(cc grpc.ClientConnInterface) BinaryDataServiceClient {
	return &binaryDataServiceClient{cc}
}

func (c *binaryDataServiceClient) SaveBinaryData(ctx context.Context, in *BinaryDataRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryDataResponse)
	err := c.cc.Invoke(ctx, BinaryDataService_SaveBinaryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryDataServiceClient) GetBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBinaryDataResponse)
	err := c.cc.Invoke(ctx, BinaryDataService_GetBinaryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryDataServiceClient) EditBinaryData(ctx context.Context, in *EditBinaryDataRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryDataResponse)
	err := c.cc.Invoke(ctx, BinaryDataService_EditBinaryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryDataServiceClient) DeleteBinaryData(ctx context.Context, in *DeleteBinaryDataRequest, opts ...grpc.CallOption) (*BinaryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryDataResponse)
	err := c.cc.Invoke(ctx, BinaryDataService_DeleteBinaryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryDataServiceServer is the server API for BinaryDataService service.
// All implementations must embed UnimplementedBinaryDataServiceServer
// for forward compatibility
type BinaryDataServiceServer interface {
	SaveBinaryData(context.Context, *BinaryDataRequest) (*BinaryDataResponse, error)
	GetBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error)
	EditBinaryData(context.Context, *EditBinaryDataRequest) (*BinaryDataResponse, error)
	DeleteBinaryData(context.Context, *DeleteBinaryDataRequest) (*BinaryDataResponse, error)
	mustEmbedUnimplementedBinaryDataServiceServer()
}

// UnimplementedBinaryDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBinaryDataServiceServer struct {
}

func (UnimplementedBinaryDataServiceServer) SaveBinaryData(context.Context, *BinaryDataRequest) (*BinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) GetBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) EditBinaryData(context.Context, *EditBinaryDataRequest) (*BinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) DeleteBinaryData(context.Context, *DeleteBinaryDataRequest) (*BinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) mustEmbedUnimplementedBinaryDataServiceServer() {}

// UnsafeBinaryDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryDataServiceServer will
// result in compilation errors.
type UnsafeBinaryDataServiceServer interface {
	mustEmbedUnimplementedBinaryDataServiceServer()
}

func RegisterBinaryDataServiceServer(s grpc.ServiceRegistrar, srv BinaryDataServiceServer) {
	s.RegisterService(&BinaryDataService_ServiceDesc, srv)
}

func _BinaryDataService_SaveBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryDataServiceServer).SaveBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryDataService_SaveBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryDataServiceServer).SaveBinaryData(ctx, req.(*BinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryDataService_GetBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryDataServiceServer).GetBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryDataService_GetBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryDataServiceServer).GetBinaryData(ctx, req.(*GetBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryDataService_EditBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryDataServiceServer).EditBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryDataService_EditBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryDataServiceServer).EditBinaryData(ctx, req.(*EditBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryDataService_DeleteBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryDataServiceServer).DeleteBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryDataService_DeleteBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryDataServiceServer).DeleteBinaryData(ctx, req.(*DeleteBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryDataService_ServiceDesc is the grpc.ServiceDesc for BinaryDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.binary_data.BinaryDataService",
	HandlerType: (*BinaryDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveBinaryData",
			Handler:    _BinaryDataService_SaveBinaryData_Handler,
		},
		{
			MethodName: "GetBinaryData",
			Handler:    _BinaryDataService_GetBinaryData_Handler,
		},
		{
			MethodName: "EditBinaryData",
			Handler:    _BinaryDataService_EditBinaryData_Handler,
		},
		{
			MethodName: "DeleteBinaryData",
			Handler:    _BinaryDataService_DeleteBinaryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/proto/V1/binary_data/binary_data.proto",
}
