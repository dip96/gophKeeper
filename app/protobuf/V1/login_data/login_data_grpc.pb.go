// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: internal/api/proto/V1/login_data/login_data.proto

package login_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LoginDataService_SaveLoginData_FullMethodName   = "/v1.login_data.LoginDataService/SaveLoginData"
	LoginDataService_GetLoginData_FullMethodName    = "/v1.login_data.LoginDataService/GetLoginData"
	LoginDataService_EditLoginData_FullMethodName   = "/v1.login_data.LoginDataService/EditLoginData"
	LoginDataService_DeleteLoginData_FullMethodName = "/v1.login_data.LoginDataService/DeleteLoginData"
	LoginDataService_GetAllLoginData_FullMethodName = "/v1.login_data.LoginDataService/GetAllLoginData"
)

// LoginDataServiceClient is the client API for LoginDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginDataServiceClient interface {
	SaveLoginData(ctx context.Context, in *LoginDataRequest, opts ...grpc.CallOption) (*LoginDataResponse, error)
	GetLoginData(ctx context.Context, in *GetLoginDataRequest, opts ...grpc.CallOption) (*GetLoginDataResponse, error)
	EditLoginData(ctx context.Context, in *EditLoginDataRequest, opts ...grpc.CallOption) (*LoginDataResponse, error)
	DeleteLoginData(ctx context.Context, in *DeleteLoginDataRequest, opts ...grpc.CallOption) (*LoginDataResponse, error)
	GetAllLoginData(ctx context.Context, in *GetAllLoginDataRequest, opts ...grpc.CallOption) (*GetAllLoginDataResponse, error)
}

type loginDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginDataServiceClient(cc grpc.ClientConnInterface) LoginDataServiceClient {
	return &loginDataServiceClient{cc}
}

func (c *loginDataServiceClient) SaveLoginData(ctx context.Context, in *LoginDataRequest, opts ...grpc.CallOption) (*LoginDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginDataResponse)
	err := c.cc.Invoke(ctx, LoginDataService_SaveLoginData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginDataServiceClient) GetLoginData(ctx context.Context, in *GetLoginDataRequest, opts ...grpc.CallOption) (*GetLoginDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoginDataResponse)
	err := c.cc.Invoke(ctx, LoginDataService_GetLoginData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginDataServiceClient) EditLoginData(ctx context.Context, in *EditLoginDataRequest, opts ...grpc.CallOption) (*LoginDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginDataResponse)
	err := c.cc.Invoke(ctx, LoginDataService_EditLoginData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginDataServiceClient) DeleteLoginData(ctx context.Context, in *DeleteLoginDataRequest, opts ...grpc.CallOption) (*LoginDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginDataResponse)
	err := c.cc.Invoke(ctx, LoginDataService_DeleteLoginData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginDataServiceClient) GetAllLoginData(ctx context.Context, in *GetAllLoginDataRequest, opts ...grpc.CallOption) (*GetAllLoginDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllLoginDataResponse)
	err := c.cc.Invoke(ctx, LoginDataService_GetAllLoginData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginDataServiceServer is the server API for LoginDataService service.
// All implementations must embed UnimplementedLoginDataServiceServer
// for forward compatibility
type LoginDataServiceServer interface {
	SaveLoginData(context.Context, *LoginDataRequest) (*LoginDataResponse, error)
	GetLoginData(context.Context, *GetLoginDataRequest) (*GetLoginDataResponse, error)
	EditLoginData(context.Context, *EditLoginDataRequest) (*LoginDataResponse, error)
	DeleteLoginData(context.Context, *DeleteLoginDataRequest) (*LoginDataResponse, error)
	GetAllLoginData(context.Context, *GetAllLoginDataRequest) (*GetAllLoginDataResponse, error)
	mustEmbedUnimplementedLoginDataServiceServer()
}

// UnimplementedLoginDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoginDataServiceServer struct {
}

func (UnimplementedLoginDataServiceServer) SaveLoginData(context.Context, *LoginDataRequest) (*LoginDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLoginData not implemented")
}
func (UnimplementedLoginDataServiceServer) GetLoginData(context.Context, *GetLoginDataRequest) (*GetLoginDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginData not implemented")
}
func (UnimplementedLoginDataServiceServer) EditLoginData(context.Context, *EditLoginDataRequest) (*LoginDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditLoginData not implemented")
}
func (UnimplementedLoginDataServiceServer) DeleteLoginData(context.Context, *DeleteLoginDataRequest) (*LoginDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginData not implemented")
}
func (UnimplementedLoginDataServiceServer) GetAllLoginData(context.Context, *GetAllLoginDataRequest) (*GetAllLoginDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLoginData not implemented")
}
func (UnimplementedLoginDataServiceServer) mustEmbedUnimplementedLoginDataServiceServer() {}

// UnsafeLoginDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginDataServiceServer will
// result in compilation errors.
type UnsafeLoginDataServiceServer interface {
	mustEmbedUnimplementedLoginDataServiceServer()
}

func RegisterLoginDataServiceServer(s grpc.ServiceRegistrar, srv LoginDataServiceServer) {
	s.RegisterService(&LoginDataService_ServiceDesc, srv)
}

func _LoginDataService_SaveLoginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginDataServiceServer).SaveLoginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginDataService_SaveLoginData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginDataServiceServer).SaveLoginData(ctx, req.(*LoginDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginDataService_GetLoginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginDataServiceServer).GetLoginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginDataService_GetLoginData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginDataServiceServer).GetLoginData(ctx, req.(*GetLoginDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginDataService_EditLoginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditLoginDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginDataServiceServer).EditLoginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginDataService_EditLoginData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginDataServiceServer).EditLoginData(ctx, req.(*EditLoginDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginDataService_DeleteLoginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginDataServiceServer).DeleteLoginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginDataService_DeleteLoginData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginDataServiceServer).DeleteLoginData(ctx, req.(*DeleteLoginDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginDataService_GetAllLoginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLoginDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginDataServiceServer).GetAllLoginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginDataService_GetAllLoginData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginDataServiceServer).GetAllLoginData(ctx, req.(*GetAllLoginDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginDataService_ServiceDesc is the grpc.ServiceDesc for LoginDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.login_data.LoginDataService",
	HandlerType: (*LoginDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLoginData",
			Handler:    _LoginDataService_SaveLoginData_Handler,
		},
		{
			MethodName: "GetLoginData",
			Handler:    _LoginDataService_GetLoginData_Handler,
		},
		{
			MethodName: "EditLoginData",
			Handler:    _LoginDataService_EditLoginData_Handler,
		},
		{
			MethodName: "DeleteLoginData",
			Handler:    _LoginDataService_DeleteLoginData_Handler,
		},
		{
			MethodName: "GetAllLoginData",
			Handler:    _LoginDataService_GetAllLoginData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/proto/V1/login_data/login_data.proto",
}
